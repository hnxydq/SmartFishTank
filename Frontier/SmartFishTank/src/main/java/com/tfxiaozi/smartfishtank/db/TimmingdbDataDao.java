package com.tfxiaozi.smartfishtank.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIMMINGDB_DATA".
*/
public class TimmingdbDataDao extends AbstractDao<TimmingdbData, Long> {

    public static final String TABLENAME = "TIMMINGDB_DATA";

    /**
     * Properties of entity TimmingdbData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "time");
        public final static Property D1 = new Property(2, int.class, "d1", false, "d1");
        public final static Property D2 = new Property(3, int.class, "d2", false, "d2");
        public final static Property D3 = new Property(4, int.class, "d3", false, "d3");
        public final static Property D4 = new Property(5, int.class, "d4", false, "d4");
        public final static Property D5 = new Property(6, int.class, "d5", false, "d5");
        public final static Property D6 = new Property(7, int.class, "d6", false, "d6");
        public final static Property D7 = new Property(8, int.class, "d7", false, "d7");
    }


    public TimmingdbDataDao(DaoConfig config) {
        super(config);
    }
    
    public TimmingdbDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIMMINGDB_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"time\" TEXT," + // 1: time
                "\"d1\" INTEGER NOT NULL ," + // 2: d1
                "\"d2\" INTEGER NOT NULL ," + // 3: d2
                "\"d3\" INTEGER NOT NULL ," + // 4: d3
                "\"d4\" INTEGER NOT NULL ," + // 5: d4
                "\"d5\" INTEGER NOT NULL ," + // 6: d5
                "\"d6\" INTEGER NOT NULL ," + // 7: d6
                "\"d7\" INTEGER NOT NULL );"); // 8: d7
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIMMINGDB_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TimmingdbData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getD1());
        stmt.bindLong(4, entity.getD2());
        stmt.bindLong(5, entity.getD3());
        stmt.bindLong(6, entity.getD4());
        stmt.bindLong(7, entity.getD5());
        stmt.bindLong(8, entity.getD6());
        stmt.bindLong(9, entity.getD7());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TimmingdbData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
        stmt.bindLong(3, entity.getD1());
        stmt.bindLong(4, entity.getD2());
        stmt.bindLong(5, entity.getD3());
        stmt.bindLong(6, entity.getD4());
        stmt.bindLong(7, entity.getD5());
        stmt.bindLong(8, entity.getD6());
        stmt.bindLong(9, entity.getD7());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TimmingdbData readEntity(Cursor cursor, int offset) {
        TimmingdbData entity = new TimmingdbData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.getInt(offset + 2), // d1
            cursor.getInt(offset + 3), // d2
            cursor.getInt(offset + 4), // d3
            cursor.getInt(offset + 5), // d4
            cursor.getInt(offset + 6), // d5
            cursor.getInt(offset + 7), // d6
            cursor.getInt(offset + 8) // d7
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TimmingdbData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setD1(cursor.getInt(offset + 2));
        entity.setD2(cursor.getInt(offset + 3));
        entity.setD3(cursor.getInt(offset + 4));
        entity.setD4(cursor.getInt(offset + 5));
        entity.setD5(cursor.getInt(offset + 6));
        entity.setD6(cursor.getInt(offset + 7));
        entity.setD7(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TimmingdbData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TimmingdbData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TimmingdbData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
