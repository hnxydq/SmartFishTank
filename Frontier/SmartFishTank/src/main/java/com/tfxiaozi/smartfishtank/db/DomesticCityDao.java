package com.tfxiaozi.smartfishtank.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOMESTIC_CITY".
*/
public class DomesticCityDao extends AbstractDao<DomesticCity, Long> {

    public static final String TABLENAME = "DOMESTIC_CITY";

    /**
     * Properties of entity DomesticCity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cid = new Property(0, Long.class, "cid", true, "_id");
        public final static Property City = new Property(1, String.class, "city", false, "CITY");
        public final static Property Cnty = new Property(2, String.class, "cnty", false, "COUNTRY");
        public final static Property Id = new Property(3, String.class, "id", false, "CITY_ID");
        public final static Property Lat = new Property(4, String.class, "lat", false, "LATITUDE");
        public final static Property Lon = new Property(5, String.class, "lon", false, "LONGITUDE");
        public final static Property Prov = new Property(6, String.class, "prov", false, "PROVINCE");
    }


    public DomesticCityDao(DaoConfig config) {
        super(config);
    }
    
    public DomesticCityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOMESTIC_CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cid
                "\"CITY\" TEXT," + // 1: city
                "\"COUNTRY\" TEXT," + // 2: cnty
                "\"CITY_ID\" TEXT," + // 3: id
                "\"LATITUDE\" TEXT," + // 4: lat
                "\"LONGITUDE\" TEXT," + // 5: lon
                "\"PROVINCE\" TEXT);"); // 6: prov
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOMESTIC_CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DomesticCity entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String cnty = entity.getCnty();
        if (cnty != null) {
            stmt.bindString(3, cnty);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(6, lon);
        }
 
        String prov = entity.getProv();
        if (prov != null) {
            stmt.bindString(7, prov);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DomesticCity entity) {
        stmt.clearBindings();
 
        Long cid = entity.getCid();
        if (cid != null) {
            stmt.bindLong(1, cid);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String cnty = entity.getCnty();
        if (cnty != null) {
            stmt.bindString(3, cnty);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(5, lat);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(6, lon);
        }
 
        String prov = entity.getProv();
        if (prov != null) {
            stmt.bindString(7, prov);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DomesticCity readEntity(Cursor cursor, int offset) {
        DomesticCity entity = new DomesticCity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cnty
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lat
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // prov
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DomesticCity entity, int offset) {
        entity.setCid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCnty(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLat(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProv(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DomesticCity entity, long rowId) {
        entity.setCid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DomesticCity entity) {
        if(entity != null) {
            return entity.getCid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DomesticCity entity) {
        return entity.getCid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
